{"ast":null,"code":"import { ethers } from 'ethers';\nimport { getProvider, getSigner } from './provider.js';\nimport { ADDRESSES } from './config.js';\nimport ChitFundFactoryAbi from '../abis/ChitFundFactory.json';\nimport ChitGroupAbi from '../abis/ChitGroup.json';\nconst ERC20_ABI = [\"function allowance(address owner, address spender) view returns (uint256)\", \"function approve(address spender, uint256 value) returns (bool)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\"];\nfunction getContract(address, abi, signerOrProvider) {\n  return new ethers.Contract(address, abi, signerOrProvider);\n}\nexport function getFactory(readonly = true) {\n  const p = readonly ? getProvider() : undefined;\n  const signerOrProvider = readonly ? p : undefined;\n  return getContract(ADDRESSES.ChitFundFactory, ChitFundFactoryAbi, signerOrProvider !== null && signerOrProvider !== void 0 ? signerOrProvider : p);\n}\nexport function getGroup(address, readonly = true) {\n  const provider = getProvider();\n  return getContract(address, ChitGroupAbi, provider);\n}\nexport async function readGroupBasics(address) {\n  const group = getGroup(address, true);\n  const [cfg, currentCycle, phase] = await Promise.all([group.cfg(), group.currentCycle(), group.currentPhase()]);\n  return {\n    cfg,\n    currentCycle: Number(currentCycle),\n    phase: Number(phase)\n  };\n}\nexport async function createGroup(cfg) {\n  if (!ADDRESSES.ChitFundFactory || !ethers.isAddress(ADDRESSES.ChitFundFactory)) {\n    throw new Error('Invalid ChitFundFactory address in src/web3/config.js');\n  }\n  const signer = await getSigner();\n  const factory = new ethers.Contract(ADDRESSES.ChitFundFactory, ChitFundFactoryAbi, signer);\n  const organizer = await signer.getAddress();\n  const cfgWithOrganizer = {\n    ...cfg,\n    organizer\n  };\n  const tx = await factory.createChitGroup(cfgWithOrganizer);\n  const receipt = await tx.wait();\n  const ev = receipt.logs.map(l => {\n    try {\n      return factory.interface.parseLog(l);\n    } catch {\n      return null;\n    }\n  }).find(e => e && e.name === 'GroupCreated');\n  return ev ? ev.args.group : null;\n}\nexport async function listGroups() {\n  const factory = getFactory(true);\n  return await factory.getActiveGroups();\n}\nexport async function joinGroup(groupAddress, valueWei = '0') {\n  const signer = await getSigner();\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\n  const tx = await group.joinGroup({\n    value: valueWei\n  });\n  return await tx.wait();\n}\nexport function computeCommitHash(amount, saltHex) {\n  return ethers.keccak256(ethers.AbiCoder.defaultAbiCoder().encode(['uint256', 'bytes32'], [amount, saltHex]));\n}\nexport async function commitBid(groupAddress, amount, saltHex) {\n  const signer = await getSigner();\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\n  const hash = computeCommitHash(amount, saltHex);\n  const tx = await group.commitBid(hash);\n  return await tx.wait();\n}\nexport async function revealBid(groupAddress, amount, saltHex) {\n  const signer = await getSigner();\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\n  const tx = await group.revealBid(amount, saltHex);\n  return await tx.wait();\n}\nexport async function contribute(groupAddress, amountWei, isNative = true) {\n  const signer = await getSigner();\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\n  const overrides = isNative ? {\n    value: amountWei\n  } : {};\n  const tx = await group.makeContribution(amountWei, overrides);\n  return await tx.wait();\n}\nexport async function openCycle(groupAddress, cycle) {\n  const signer = await getSigner();\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\n  const tx = await group.openCycle(cycle);\n  return await tx.wait();\n}\nexport async function finalizeBidding(groupAddress) {\n  const signer = await getSigner();\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\n  const tx = await group.finalizeBidding();\n  return await tx.wait();\n}\nexport async function distributeFunds(groupAddress) {\n  const signer = await getSigner();\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\n  const tx = await group.distributeFunds();\n  return await tx.wait();\n}\nexport function getErc20(address, readonly = true) {\n  const provider = getProvider();\n  return new ethers.Contract(address, ERC20_ABI, readonly ? provider : provider);\n}\nexport async function erc20Allowance(token, owner, spender) {\n  const c = getErc20(token, true);\n  return await c.allowance(owner, spender);\n}\nexport async function erc20Approve(token, spender, amount) {\n  const signer = await getSigner();\n  const c = new ethers.Contract(token, ERC20_ABI, signer);\n  const tx = await c.approve(spender, amount);\n  return await tx.wait();\n}","map":{"version":3,"names":["ethers","getProvider","getSigner","ADDRESSES","ChitFundFactoryAbi","ChitGroupAbi","ERC20_ABI","getContract","address","abi","signerOrProvider","Contract","getFactory","readonly","p","undefined","ChitFundFactory","getGroup","provider","readGroupBasics","group","cfg","currentCycle","phase","Promise","all","currentPhase","Number","createGroup","isAddress","Error","signer","factory","organizer","getAddress","cfgWithOrganizer","tx","createChitGroup","receipt","wait","ev","logs","map","l","interface","parseLog","find","e","name","args","listGroups","getActiveGroups","joinGroup","groupAddress","valueWei","value","computeCommitHash","amount","saltHex","keccak256","AbiCoder","defaultAbiCoder","encode","commitBid","hash","revealBid","contribute","amountWei","isNative","overrides","makeContribution","openCycle","cycle","finalizeBidding","distributeFunds","getErc20","erc20Allowance","token","owner","spender","c","allowance","erc20Approve","approve"],"sources":["C:/Users/kjalf/Downloads/ChitFund_SHM-main/ChitFund_SHM-main/src/web3/contracts.js"],"sourcesContent":["import { ethers } from 'ethers';\r\nimport { getProvider, getSigner } from './provider.js';\r\nimport { ADDRESSES } from './config.js';\r\nimport ChitFundFactoryAbi from '../abis/ChitFundFactory.json';\r\nimport ChitGroupAbi from '../abis/ChitGroup.json';\r\n\r\nconst ERC20_ABI = [\r\n  \"function allowance(address owner, address spender) view returns (uint256)\",\r\n  \"function approve(address spender, uint256 value) returns (bool)\",\r\n  \"function decimals() view returns (uint8)\",\r\n  \"function symbol() view returns (string)\"\r\n];\r\n\r\nfunction getContract(address, abi, signerOrProvider) {\r\n  return new ethers.Contract(address, abi, signerOrProvider);\r\n}\r\n\r\nexport function getFactory(readonly = true) {\r\n  const p = readonly ? getProvider() : undefined;\r\n  const signerOrProvider = readonly ? p : undefined;\r\n  return getContract(ADDRESSES.ChitFundFactory, ChitFundFactoryAbi, signerOrProvider ?? p);\r\n}\r\n\r\nexport function getGroup(address, readonly = true) {\r\n  const provider = getProvider();\r\n  return getContract(address, ChitGroupAbi, provider);\r\n}\r\n\r\nexport async function readGroupBasics(address) {\r\n  const group = getGroup(address, true);\r\n  const [cfg, currentCycle, phase] = await Promise.all([\r\n    group.cfg(),\r\n    group.currentCycle(),\r\n    group.currentPhase(),\r\n  ]);\r\n  return { cfg, currentCycle: Number(currentCycle), phase: Number(phase) };\r\n}\r\n\r\nexport async function createGroup(cfg) {\r\n  if (!ADDRESSES.ChitFundFactory || !ethers.isAddress(ADDRESSES.ChitFundFactory)) {\r\n    throw new Error('Invalid ChitFundFactory address in src/web3/config.js');\r\n  }\r\n  const signer = await getSigner();\r\n  const factory = new ethers.Contract(ADDRESSES.ChitFundFactory, ChitFundFactoryAbi, signer);\r\n  const organizer = await signer.getAddress();\r\n  const cfgWithOrganizer = { ...cfg, organizer };\r\n  const tx = await factory.createChitGroup(cfgWithOrganizer);\r\n  const receipt = await tx.wait();\r\n  const ev = receipt.logs\r\n    .map(l => {\r\n      try { return factory.interface.parseLog(l); } catch { return null; }\r\n    })\r\n    .find(e => e && e.name === 'GroupCreated');\r\n  return ev ? ev.args.group : null;\r\n}\r\n\r\nexport async function listGroups() {\r\n  const factory = getFactory(true);\r\n  return await factory.getActiveGroups();\r\n}\r\n\r\nexport async function joinGroup(groupAddress, valueWei = '0') {\r\n  const signer = await getSigner();\r\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\r\n  const tx = await group.joinGroup({ value: valueWei });\r\n  return await tx.wait();\r\n}\r\n\r\nexport function computeCommitHash(amount, saltHex) {\r\n  return ethers.keccak256(ethers.AbiCoder.defaultAbiCoder().encode(['uint256','bytes32'], [amount, saltHex]));\r\n}\r\n\r\nexport async function commitBid(groupAddress, amount, saltHex) {\r\n  const signer = await getSigner();\r\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\r\n  const hash = computeCommitHash(amount, saltHex);\r\n  const tx = await group.commitBid(hash);\r\n  return await tx.wait();\r\n}\r\n\r\nexport async function revealBid(groupAddress, amount, saltHex) {\r\n  const signer = await getSigner();\r\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\r\n  const tx = await group.revealBid(amount, saltHex);\r\n  return await tx.wait();\r\n}\r\n\r\nexport async function contribute(groupAddress, amountWei, isNative = true) {\r\n  const signer = await getSigner();\r\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\r\n  const overrides = isNative ? { value: amountWei } : {};\r\n  const tx = await group.makeContribution(amountWei, overrides);\r\n  return await tx.wait();\r\n}\r\n\r\nexport async function openCycle(groupAddress, cycle) {\r\n  const signer = await getSigner();\r\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\r\n  const tx = await group.openCycle(cycle);\r\n  return await tx.wait();\r\n}\r\n\r\nexport async function finalizeBidding(groupAddress) {\r\n  const signer = await getSigner();\r\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\r\n  const tx = await group.finalizeBidding();\r\n  return await tx.wait();\r\n}\r\n\r\nexport async function distributeFunds(groupAddress) {\r\n  const signer = await getSigner();\r\n  const group = new ethers.Contract(groupAddress, ChitGroupAbi, signer);\r\n  const tx = await group.distributeFunds();\r\n  return await tx.wait();\r\n}\r\n\r\nexport function getErc20(address, readonly = true) {\r\n  const provider = getProvider();\r\n  return new ethers.Contract(address, ERC20_ABI, readonly ? provider : provider);\r\n}\r\n\r\nexport async function erc20Allowance(token, owner, spender) {\r\n  const c = getErc20(token, true);\r\n  return await c.allowance(owner, spender);\r\n}\r\n\r\nexport async function erc20Approve(token, spender, amount) {\r\n  const signer = await getSigner();\r\n  const c = new ethers.Contract(token, ERC20_ABI, signer);\r\n  const tx = await c.approve(spender, amount);\r\n  return await tx.wait();\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}